{"type": "Ryven nodes package", "nodes": [{"title": "random matrix", "description": "Generates a random matrix", "type": "", "module name": "linalg___RandomMatrix0", "class name": "RandomMatrix", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "m", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}, {"type": "data", "label": "n", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}], "outputs": [{"type": "data", "label": ""}]}, {"title": "id matrix", "description": "Creates a nxn identity matrix.", "type": "", "module name": "linalg___IdMatrix0", "class name": "IdMatrix", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "n", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}], "outputs": [{"type": "data", "label": ""}]}, {"title": "\u00d7", "description": "Performs a matrix multiplication, if defined on the provided matrices.", "type": "", "module name": "linalg___MatrixMult0", "class name": "MatrixMult", "design style": "minimalistic", "color": "#1599f0", "has main widget": false, "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "zeros", "description": "Create a mxn null matrix.", "type": "", "module name": "linalg___Zeros0", "class name": "Zeros", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "m", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}, {"type": "data", "label": "n", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}], "outputs": [{"type": "data", "label": ""}]}, {"title": "mask upper", "description": "Masks the upper right triangular of a matrix.", "type": "", "module name": "linalg___MaskUpper0", "class name": "MaskUpper", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "mask lower", "description": "Masks the lower left triangular of a matrix.", "type": "", "module name": "linalg___MaskLower0", "class name": "MaskLower", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "inverse matrix", "description": "Creates the inverse of a matrix.", "type": "", "module name": "linalg___InverseMatrix0", "class name": "InverseMatrix", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "diag", "description": "Extracts a diagonal (from a matrix) or constructs a diagonal matrix (from an array).", "type": "", "module name": "linalg___Diag0", "class name": "Diag", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "diagflat", "description": "Creates a diagonal matrix from a flattened input (horizontal vector).", "type": "", "module name": "linalg___Diagflat0", "class name": "Diagflat", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "show matrix", "description": "Displays a matrix or any array.", "type": "", "module name": "linalg___ShowMatrix0", "class name": "ShowMatrix", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "ones", "description": "Create a matrix filled with ones", "type": "", "module name": "linalg___Ones0", "class name": "Ones", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "m", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}, {"type": "data", "label": "n", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}], "outputs": [{"type": "data", "label": ""}]}, {"title": "matrix", "description": "Create a custom matrix. You can use <number>j to create complex numbers, which will convert the whole matrix to complex type, and you can use variables using v('<varname>').", "type": "", "module name": "linalg___Matrix0", "class name": "Matrix", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [], "outputs": [{"type": "data", "label": ""}]}, {"title": "eigen", "description": "Generate eigenvalue and eigenvector for a list of matrices.", "type": "", "module name": "linalg___Eigen0", "class name": "Eigen", "design style": "extended", "color": "#1599f0", "has main widget": false, "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": "eigenvalues"}, {"type": "data", "label": "eigenvectors"}]}, {"title": "LU decomp", "description": "Performs a LU decomposition of a matrix.", "type": "", "module name": "linalg___LUDecomp0", "class name": "LUDecomp", "design style": "extended", "color": "#1599f0", "has main widget": false, "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": "P"}, {"type": "data", "label": "L"}, {"type": "data", "label": "u"}]}, {"title": "real", "description": "Returns the real (not imaginary) part of an array.", "type": "", "module name": "linalg___Real0", "class name": "Real", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "conjugate", "description": "Conjugates an array which means inverting all imaginary parts.", "type": "", "module name": "linalg___Conjugate0", "class name": "Conjugate", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "transpose", "description": "Transposes an array by swapping dimensions.", "type": "", "module name": "linalg___Transpose0", "class name": "Transpose", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "solve", "description": "Finds the EXACT solution of Ax=b for x.", "type": "", "module name": "linalg___Solve0", "class name": "Solve", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "A", "has widget": false}, {"type": "data", "label": "b", "has widget": false}], "outputs": [{"type": "data", "label": "x"}]}, {"title": "imag", "description": "Returns the imaginary (not  real) part of an array.", "type": "", "module name": "linalg___Imag0", "class name": "Imag", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "dot", "description": "Dot product for two arrays, without conjugation.", "type": "", "module name": "linalg___Dot0", "class name": "Dot", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "vdot", "description": "Dot product with complex conjugation.", "type": "", "module name": "linalg___Vdot0", "class name": "Vdot", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "inner product", "description": "Gennerates the inner product of two arrays.", "type": "", "module name": "linalg___InnerProduct0", "class name": "InnerProduct", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "outer product", "description": "Computes the outer product of two vectors.", "type": "", "module name": "linalg___OuterProduct0", "class name": "OuterProduct", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "matrix power", "description": "Raises a square matrix to power n", "type": "", "module name": "linalg___MatrixPower0", "class name": "MatrixPower", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "n", "has widget": true, "widget name": "std line edit s r", "widget position": "besides"}], "outputs": [{"type": "data", "label": ""}]}, {"title": "kron", "description": "Kronecker product of two arrays.", "type": "", "module name": "linalg___Kron0", "class name": "Kron", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}, {"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}, {"title": "det", "description": "Determinant of a matrix.", "type": "", "module name": "linalg___Det0", "class name": "Det", "design style": "extended", "color": "#1599f0", "has main widget": true, "widget position": "under ports", "custom input widgets": [], "inputs": [{"type": "data", "label": "", "has widget": false}], "outputs": [{"type": "data", "label": ""}]}]}